{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\ncontroller = Controller()\nleft_drive_smart = Motor(Ports.PORT6, 0.5, False)\nright_drive_smart = Motor(Ports.PORT1, 0.5, True)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 200, 173, 76, MM, 1)\nmotor_group_2_motor_a = Motor(Ports.PORT2, False)\nmotor_group_2_motor_b = Motor(Ports.PORT5, True)\nmotor_group_2 = MotorGroup(motor_group_2_motor_a, motor_group_2_motor_b)\nmotor_group_3_motor_a = Motor(Ports.PORT3, False)\nmotor_group_3_motor_b = Motor(Ports.PORT4, True)\nmotor_group_3 = MotorGroup(motor_group_3_motor_a, motor_group_3_motor_b)\npneumatic_12 = Pneumatic(Ports.PORT12)\npneumatic_7 = Pneumatic(Ports.PORT7)\ntouchled_11 = Touchled(Ports.PORT11)\noptical_8 = Optical(Ports.PORT8)\noptical_9 = Optical(Ports.PORT9)\n\n\n\n# Make random actually random\ndef setRandomSeedUsingAccel():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    urandom.seed(int(xaxis + yaxis + zaxis))\n    \n# Set random seed \nsetRandomSeedUsingAccel()\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_right_shoulder_control_motors_stopped = True\ndrivetrain_l_needs_to_be_stopped_controller = False\ndrivetrain_r_needs_to_be_stopped_controller = False\n\n# define a task that will handle monitoring inputs from controller\ndef rc_auto_loop_function_controller():\n    global drivetrain_l_needs_to_be_stopped_controller, drivetrain_r_needs_to_be_stopped_controller, controller_right_shoulder_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axisA + axisC\n            # right = axisA - axisC\n            drivetrain_left_side_speed = controller.axisA.position() + controller.axisC.position()\n            drivetrain_right_side_speed = controller.axisA.position() - controller.axisC.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n            # check the buttonRUp/buttonRDown status\n            # to control motor_group_2\n            if controller.buttonRUp.pressing():\n                motor_group_2.spin(FORWARD)\n                controller_right_shoulder_control_motors_stopped = False\n            elif controller.buttonRDown.pressing():\n                motor_group_2.spin(REVERSE)\n                controller_right_shoulder_control_motors_stopped = False\n            elif not controller_right_shoulder_control_motors_stopped:\n                motor_group_2.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_right_shoulder_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller = Thread(rc_auto_loop_function_controller)\n\n#endregion VEXcode Generated Robot Configuration\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nloaded = 0\ntoggle = 0\n\ndef Chamber_loaded():\n    global loaded, toggle, vexcode_brain_precision, vexcode_console_precision\n    pass\n\ndef onevent_controllerbuttonEUp_pressed_0():\n    global loaded, toggle, vexcode_brain_precision, vexcode_console_precision\n    pneumatic_7.pump_on()\n\ndef when_started1():\n    global loaded, toggle, vexcode_brain_precision, vexcode_console_precision\n    optical_8.gesture_disable()\n    optical_8.set_light_power(100, PERCENT)\n    optical_8.set_light(LedStateType.ON)\n    optical_9.gesture_disable()\n    optical_9.set_light_power(100, PERCENT)\n    optical_9.set_light(LedStateType.ON)\n    pneumatic_7.pump_on()\n    motor_group_2.set_velocity(100, PERCENT)\n    motor_group_3.set_velocity(100, PERCENT)\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.set_turn_velocity(100, PERCENT)\n    pneumatic_7.pump_on()\n    touchled_11.set_brightness(100)\n    touchled_11.set_color(Color.GREEN)\n    toggle = 0\n    loaded = 0\n    while True:\n        if controller.buttonEDown.pressing():\n            while True:\n                if touchled_11.pressing():\n                    touchled_11.set_color(Color.VIOLET)\n                    break\n                if optical_9.is_near_object() and optical_8.is_near_object():\n                    if controller.buttonRDown.pressing():\n                        motor_group_2.spin(REVERSE)\n                    else:\n                        motor_group_2.stop()\n                        brain.screen.print(\"yes ball\")\n                else:\n                    if controller.buttonRDown.pressing():\n                        motor_group_2.spin(REVERSE)\n                    else:\n                        motor_group_2.spin(FORWARD)\n                        brain.screen.print(\"no ball\")\n                wait(20, MSEC)\n        wait(20, MSEC)\n\ndef onevent_controllerbuttonEUp_pressed_1():\n    global loaded, toggle, vexcode_brain_precision, vexcode_console_precision\n    pneumatic_7.pump_off()\n\ndef when_started2():\n    global loaded, toggle, vexcode_brain_precision, vexcode_console_precision\n    while True:\n        if touchled_11.pressing():\n            touchled_11.set_color(Color.VIOLET)\n            break\n        if controller.buttonFUp.pressing():\n            pneumatic_7.extend(CYLINDER1)\n            pneumatic_7.retract(CYLINDER2)\n            motor_group_3.set_velocity(100, PERCENT)\n            motor_group_3.spin(REVERSE)\n            touchled_11.set_color(Color.RED)\n            while not not controller.buttonFUp.pressing():\n                wait(20, MSEC)\n        wait(20, MSEC)\n\ndef when_started3():\n    global loaded, toggle, vexcode_brain_precision, vexcode_console_precision\n    while True:\n        if touchled_11.pressing():\n            touchled_11.set_color(Color.VIOLET)\n            break\n        if controller.buttonFDown.pressing():\n            pneumatic_7.retract(CYLINDER1)\n            pneumatic_7.extend(CYLINDER2)\n            motor_group_3.set_velocity(70, PERCENT)\n            motor_group_3.spin(REVERSE)\n            touchled_11.set_color(Color.BLUE)\n            while not not controller.buttonFDown.pressing():\n                wait(20, MSEC)\n        wait(20, MSEC)\n\ndef when_started4():\n    global loaded, toggle, vexcode_brain_precision, vexcode_console_precision\n    while True:\n        if touchled_11.pressing():\n            touchled_11.set_color(Color.VIOLET)\n            break\n        if controller.buttonEUp.pressing():\n            pneumatic_12.retract(CYLINDER1)\n            pneumatic_12.retract(CYLINDER2)\n            touchled_11.set_color(Color.PURPLE)\n            wait(0.4, SECONDS)\n            pneumatic_12.extend(CYLINDER1)\n            pneumatic_12.extend(CYLINDER2)\n            touchled_11.set_color(Color.WHITE)\n            while not not controller.buttonEUp.pressing():\n                wait(20, MSEC)\n        wait(20, MSEC)\n\ndef when_started5():\n    global loaded, toggle, vexcode_brain_precision, vexcode_console_precision\n    while True:\n        if controller.buttonLDown.pressing():\n            if touchled_11.pressing():\n                touchled_11.set_color(Color.VIOLET)\n                break\n            if loaded == 0:\n                motor_group_3.spin(REVERSE)\n                loaded = 1\n                while not not controller.buttonLDown.pressing():\n                    wait(20, MSEC)\n            else:\n                if loaded == 1:\n                    loaded = 0\n                    while not not controller.buttonLDown.pressing():\n                        wait(20, MSEC)\n        wait(20, MSEC)\n\ndef when_started6():\n    global loaded, toggle, vexcode_brain_precision, vexcode_console_precision\n    while True:\n        wait(20, MSEC)\n\n# system event handlers\ncontroller.buttonEUp.pressed(onevent_controllerbuttonEUp_pressed_0)\ncontroller.buttonEUp.pressed(onevent_controllerbuttonEUp_pressed_1)\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\nws2 = Thread( when_started2 )\nws3 = Thread( when_started3 )\nws4 = Thread( when_started4 )\nws5 = Thread( when_started5 )\nws6 = Thread( when_started6 )\nwhen_started1()\n","textLanguage":"python","rconfig":[{"port":[],"name":"controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"motor_group_2","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"split"},"triportSourcePort":22},{"port":[6,1,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:2","direction":"fwd","gyroType":"none","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[2,5],"name":"motor_group_2","customName":false,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[3,4],"name":"motor_group_3","customName":false,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[12],"name":"pneumatic_12","customName":false,"deviceType":"Pneumatic","deviceClass":"pneumatic","setting":{"cylinder1":"cylinder1","cylinder2":"cylinder2","cylinder1_reversed":"false","cylinder2_reversed":"false"},"triportSourcePort":22},{"port":[7],"name":"pneumatic_7","customName":false,"deviceType":"Pneumatic","deviceClass":"pneumatic","setting":{"cylinder1":"cylinder1","cylinder2":"cylinder2","cylinder1_reversed":"false","cylinder2_reversed":"true"},"triportSourcePort":22},{"port":[11],"name":"touchled_11","customName":false,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[8],"name":"optical_8","customName":false,"deviceType":"Optical","deviceClass":"optical","setting":{},"triportSourcePort":22},{"port":[9],"name":"optical_9","customName":false,"deviceType":"Optical","deviceClass":"optical","setting":{},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"","minVersion":"3.0.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}